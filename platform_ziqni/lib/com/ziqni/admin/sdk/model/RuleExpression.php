<?php
/**
 * RuleExpression
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com\ziqni\admin\sdk\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RuleExpression Class Doc Comment
 *
 * @category Class
 * @description A conditional expressions is an element that declares either a rule expression, condition or routine to be evaluated or executed
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RuleExpression implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RuleExpression';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'must_match_all' => 'bool',
        'must_evaluate_to' => 'bool',
        'scope' => 'string',
        'operand' => 'string',
        'operator' => 'string',
        'value' => 'string',
        'rules' => '\OpenAPI\Client\com\ziqni\admin\sdk\model\RuleExpression[]',
        'then' => '\OpenAPI\Client\com\ziqni\admin\sdk\model\RuleRoutine[]',
        'line_number' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'must_match_all' => null,
        'must_evaluate_to' => null,
        'scope' => null,
        'operand' => null,
        'operator' => null,
        'value' => null,
        'rules' => null,
        'then' => null,
        'line_number' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
		'must_match_all' => false,
		'must_evaluate_to' => false,
		'scope' => false,
		'operand' => false,
		'operator' => false,
		'value' => false,
		'rules' => false,
		'then' => false,
		'line_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'must_match_all' => 'mustMatchAll',
        'must_evaluate_to' => 'mustEvaluateTo',
        'scope' => 'scope',
        'operand' => 'operand',
        'operator' => 'operator',
        'value' => 'value',
        'rules' => 'rules',
        'then' => 'then',
        'line_number' => 'lineNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'must_match_all' => 'setMustMatchAll',
        'must_evaluate_to' => 'setMustEvaluateTo',
        'scope' => 'setScope',
        'operand' => 'setOperand',
        'operator' => 'setOperator',
        'value' => 'setValue',
        'rules' => 'setRules',
        'then' => 'setThen',
        'line_number' => 'setLineNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'must_match_all' => 'getMustMatchAll',
        'must_evaluate_to' => 'getMustEvaluateTo',
        'scope' => 'getScope',
        'operand' => 'getOperand',
        'operator' => 'getOperator',
        'value' => 'getValue',
        'rules' => 'getRules',
        'then' => 'getThen',
        'line_number' => 'getLineNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('must_match_all', $data ?? [], null);
        $this->setIfExists('must_evaluate_to', $data ?? [], null);
        $this->setIfExists('scope', $data ?? [], null);
        $this->setIfExists('operand', $data ?? [], null);
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('rules', $data ?? [], null);
        $this->setIfExists('then', $data ?? [], null);
        $this->setIfExists('line_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type condition or expression or routine
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets must_match_all
     *
     * @return bool|null
     */
    public function getMustMatchAll()
    {
        return $this->container['must_match_all'];
    }

    /**
     * Sets must_match_all
     *
     * @param bool|null $must_match_all All expressions in the condition must either evaluate to TRUE or FALSE if set to TRUE
     *
     * @return self
     */
    public function setMustMatchAll($must_match_all)
    {
        if (is_null($must_match_all)) {
            throw new \InvalidArgumentException('non-nullable must_match_all cannot be null');
        }
        $this->container['must_match_all'] = $must_match_all;

        return $this;
    }

    /**
     * Gets must_evaluate_to
     *
     * @return bool|null
     */
    public function getMustEvaluateTo()
    {
        return $this->container['must_evaluate_to'];
    }

    /**
     * Sets must_evaluate_to
     *
     * @param bool|null $must_evaluate_to All the expressions of this condition must either evaluate to TRUE or FALSE
     *
     * @return self
     */
    public function setMustEvaluateTo($must_evaluate_to)
    {
        if (is_null($must_evaluate_to)) {
            throw new \InvalidArgumentException('non-nullable must_evaluate_to cannot be null');
        }
        $this->container['must_evaluate_to'] = $must_evaluate_to;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return string|null
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string|null $scope The scope of the operand used in the expression
     *
     * @return self
     */
    public function setScope($scope)
    {
        if (is_null($scope)) {
            throw new \InvalidArgumentException('non-nullable scope cannot be null');
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets operand
     *
     * @return string|null
     */
    public function getOperand()
    {
        return $this->container['operand'];
    }

    /**
     * Sets operand
     *
     * @param string|null $operand The operand for the rule.
     *
     * @return self
     */
    public function setOperand($operand)
    {
        if (is_null($operand)) {
            throw new \InvalidArgumentException('non-nullable operand cannot be null');
        }
        $this->container['operand'] = $operand;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string|null
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string|null $operator [ *.* ] or [ .* ] or [ == ] or [ > ] or [ >= ] or [ <=]  or [ < ] or [ <> ]
     *
     * @return self
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value The value associated with the expression
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets rules
     *
     * @return \OpenAPI\Client\com\ziqni\admin\sdk\model\RuleExpression[]|null
     */
    public function getRules()
    {
        return $this->container['rules'];
    }

    /**
     * Sets rules
     *
     * @param \OpenAPI\Client\com\ziqni\admin\sdk\model\RuleExpression[]|null $rules 
     *
     * @return self
     */
    public function setRules($rules)
    {
        if (is_null($rules)) {
            throw new \InvalidArgumentException('non-nullable rules cannot be null');
        }
        $this->container['rules'] = $rules;

        return $this;
    }

    /**
     * Gets then
     *
     * @return \OpenAPI\Client\com\ziqni\admin\sdk\model\RuleRoutine[]|null
     */
    public function getThen()
    {
        return $this->container['then'];
    }

    /**
     * Sets then
     *
     * @param \OpenAPI\Client\com\ziqni\admin\sdk\model\RuleRoutine[]|null $then The routine to run when all the conditions have evaluted to the required level
     *
     * @return self
     */
    public function setThen($then)
    {
        if (is_null($then)) {
            throw new \InvalidArgumentException('non-nullable then cannot be null');
        }
        $this->container['then'] = $then;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int|null
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int|null $line_number The order the rules have to be executed in.
     *
     * @return self
     */
    public function setLineNumber($line_number)
    {
        if (is_null($line_number)) {
            throw new \InvalidArgumentException('non-nullable line_number cannot be null');
        }
        $this->container['line_number'] = $line_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


