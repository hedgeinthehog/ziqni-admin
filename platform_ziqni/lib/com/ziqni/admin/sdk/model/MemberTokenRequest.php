<?php
/**
 * MemberTokenRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com\ziqni\admin\sdk\model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MemberTokenRequest Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MemberTokenRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MemberTokenRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'api_key' => 'string',
        'is_reference_id' => 'bool',
        'origins' => 'string[]',
        'member' => 'string',
        'expires' => 'int',
        'resource' => 'string',
        'disabled_services' => 'string[]',
        'language_key' => 'string',
        'currency_key' => 'string',
        'time_zone_offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'api_key' => null,
        'is_reference_id' => null,
        'origins' => null,
        'member' => null,
        'expires' => null,
        'resource' => null,
        'disabled_services' => null,
        'language_key' => null,
        'currency_key' => null,
        'time_zone_offset' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'api_key' => false,
		'is_reference_id' => false,
		'origins' => false,
		'member' => false,
		'expires' => false,
		'resource' => false,
		'disabled_services' => false,
		'language_key' => false,
		'currency_key' => false,
		'time_zone_offset' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'api_key' => 'apiKey',
        'is_reference_id' => 'isReferenceId',
        'origins' => 'origins',
        'member' => 'member',
        'expires' => 'expires',
        'resource' => 'resource',
        'disabled_services' => 'disabledServices',
        'language_key' => 'languageKey',
        'currency_key' => 'currencyKey',
        'time_zone_offset' => 'timeZoneOffset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'api_key' => 'setApiKey',
        'is_reference_id' => 'setIsReferenceId',
        'origins' => 'setOrigins',
        'member' => 'setMember',
        'expires' => 'setExpires',
        'resource' => 'setResource',
        'disabled_services' => 'setDisabledServices',
        'language_key' => 'setLanguageKey',
        'currency_key' => 'setCurrencyKey',
        'time_zone_offset' => 'setTimeZoneOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'api_key' => 'getApiKey',
        'is_reference_id' => 'getIsReferenceId',
        'origins' => 'getOrigins',
        'member' => 'getMember',
        'expires' => 'getExpires',
        'resource' => 'getResource',
        'disabled_services' => 'getDisabledServices',
        'language_key' => 'getLanguageKey',
        'currency_key' => 'getCurrencyKey',
        'time_zone_offset' => 'getTimeZoneOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('is_reference_id', $data ?? [], null);
        $this->setIfExists('origins', $data ?? [], null);
        $this->setIfExists('member', $data ?? [], null);
        $this->setIfExists('expires', $data ?? [], null);
        $this->setIfExists('resource', $data ?? [], null);
        $this->setIfExists('disabled_services', $data ?? [], null);
        $this->setIfExists('language_key', $data ?? [], null);
        $this->setIfExists('currency_key', $data ?? [], null);
        $this->setIfExists('time_zone_offset', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['member'] === null) {
            $invalidProperties[] = "'member' can't be null";
        }
        if ($this->container['resource'] === null) {
            $invalidProperties[] = "'resource' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key The API key to use to generate this token.
     *
     * @return self
     */
    public function setApiKey($api_key)
    {
        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets is_reference_id
     *
     * @return bool|null
     */
    public function getIsReferenceId()
    {
        return $this->container['is_reference_id'];
    }

    /**
     * Sets is_reference_id
     *
     * @param bool|null $is_reference_id Default is FALSE, if set to TRUE then the meberId will be assumed to be client provided reference id, if set to false then the memberId will be assumed to be a ZIQNI generated identifier.
     *
     * @return self
     */
    public function setIsReferenceId($is_reference_id)
    {
        if (is_null($is_reference_id)) {
            throw new \InvalidArgumentException('non-nullable is_reference_id cannot be null');
        }
        $this->container['is_reference_id'] = $is_reference_id;

        return $this;
    }

    /**
     * Gets origins
     *
     * @return string[]|null
     */
    public function getOrigins()
    {
        return $this->container['origins'];
    }

    /**
     * Sets origins
     *
     * @param string[]|null $origins Allowed origins for the generated token. Leave empty to permit all origins, Alternative provide up to 3 allowed origin URIs like https://my-space.api.ziqni.app
     *
     * @return self
     */
    public function setOrigins($origins)
    {
        if (is_null($origins)) {
            throw new \InvalidArgumentException('non-nullable origins cannot be null');
        }
        $this->container['origins'] = $origins;

        return $this;
    }

    /**
     * Gets member
     *
     * @return string
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     *
     * @param string $member The identifier used to find the member information. if this value is set to \"__PUBLIC__\" and isReferenceId is set to \"FALSE\" then a genral use, non-member specific token will be issued
     *
     * @return self
     */
    public function setMember($member)
    {
        if (is_null($member)) {
            throw new \InvalidArgumentException('non-nullable member cannot be null');
        }
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return int|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param int|null $expires The number of minutes this token will be valid for. If left blank the token will only be valid for 30 minutes
     *
     * @return self
     */
    public function setExpires($expires)
    {
        if (is_null($expires)) {
            throw new \InvalidArgumentException('non-nullable expires cannot be null');
        }
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string $resource This will be ziqni-gapi or similar
     *
     * @return self
     */
    public function setResource($resource)
    {
        if (is_null($resource)) {
            throw new \InvalidArgumentException('non-nullable resource cannot be null');
        }
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets disabled_services
     *
     * @return string[]|null
     */
    public function getDisabledServices()
    {
        return $this->container['disabled_services'];
    }

    /**
     * Sets disabled_services
     *
     * @param string[]|null $disabled_services A list of services to be disabled for this web token
     *
     * @return self
     */
    public function setDisabledServices($disabled_services)
    {
        if (is_null($disabled_services)) {
            throw new \InvalidArgumentException('non-nullable disabled_services cannot be null');
        }
        $this->container['disabled_services'] = $disabled_services;

        return $this;
    }

    /**
     * Gets language_key
     *
     * @return string|null
     */
    public function getLanguageKey()
    {
        return $this->container['language_key'];
    }

    /**
     * Sets language_key
     *
     * @param string|null $language_key The language code to use if none is provided in the member api requests
     *
     * @return self
     */
    public function setLanguageKey($language_key)
    {
        if (is_null($language_key)) {
            throw new \InvalidArgumentException('non-nullable language_key cannot be null');
        }
        $this->container['language_key'] = $language_key;

        return $this;
    }

    /**
     * Gets currency_key
     *
     * @return string|null
     */
    public function getCurrencyKey()
    {
        return $this->container['currency_key'];
    }

    /**
     * Sets currency_key
     *
     * @param string|null $currency_key The language key to use if none is provided in the member api requests
     *
     * @return self
     */
    public function setCurrencyKey($currency_key)
    {
        if (is_null($currency_key)) {
            throw new \InvalidArgumentException('non-nullable currency_key cannot be null');
        }
        $this->container['currency_key'] = $currency_key;

        return $this;
    }

    /**
     * Gets time_zone_offset
     *
     * @return int|null
     */
    public function getTimeZoneOffset()
    {
        return $this->container['time_zone_offset'];
    }

    /**
     * Sets time_zone_offset
     *
     * @param int|null $time_zone_offset The time zone to use when returning date and time values
     *
     * @return self
     */
    public function setTimeZoneOffset($time_zone_offset)
    {
        if (is_null($time_zone_offset)) {
            throw new \InvalidArgumentException('non-nullable time_zone_offset cannot be null');
        }
        $this->container['time_zone_offset'] = $time_zone_offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


