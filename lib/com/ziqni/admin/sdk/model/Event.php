<?php
/**
 * Event
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Event Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Event implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Event';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'space_name' => 'string',
        'created' => '\DateTime',
        'member_id' => 'string',
        'member_ref_id' => 'string',
        'action' => 'string',
        'batch_id' => 'string',
        'entity_id' => 'string',
        'event_ref_id' => 'string',
        'entity_ref_id' => 'string',
        'source_value' => 'float',
        'points' => 'float',
        'transaction_timestamp' => '\DateTime',
        'metadata' => 'array<string,mixed>',
        'custom_fields' => 'array<string,mixed>',
        'tags' => 'string[]',
        'relates_to' => 'string[]',
        'relates_to_external' => 'string[]',
        'unit_of_measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'space_name' => null,
        'created' => 'date-time',
        'member_id' => null,
        'member_ref_id' => null,
        'action' => null,
        'batch_id' => null,
        'entity_id' => null,
        'event_ref_id' => null,
        'entity_ref_id' => null,
        'source_value' => 'double',
        'points' => 'double',
        'transaction_timestamp' => 'date-time',
        'metadata' => null,
        'custom_fields' => null,
        'tags' => null,
        'relates_to' => null,
        'relates_to_external' => null,
        'unit_of_measure' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'space_name' => false,
		'created' => false,
		'member_id' => false,
		'member_ref_id' => false,
		'action' => false,
		'batch_id' => false,
		'entity_id' => false,
		'event_ref_id' => false,
		'entity_ref_id' => false,
		'source_value' => false,
		'points' => false,
		'transaction_timestamp' => false,
		'metadata' => false,
		'custom_fields' => false,
		'tags' => false,
		'relates_to' => false,
		'relates_to_external' => false,
		'unit_of_measure' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'space_name' => 'spaceName',
        'created' => 'created',
        'member_id' => 'memberId',
        'member_ref_id' => 'memberRefId',
        'action' => 'action',
        'batch_id' => 'batchId',
        'entity_id' => 'entityId',
        'event_ref_id' => 'eventRefId',
        'entity_ref_id' => 'entityRefId',
        'source_value' => 'sourceValue',
        'points' => 'points',
        'transaction_timestamp' => 'transactionTimestamp',
        'metadata' => 'metadata',
        'custom_fields' => 'customFields',
        'tags' => 'tags',
        'relates_to' => 'relatesTo',
        'relates_to_external' => 'relatesToExternal',
        'unit_of_measure' => 'unitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'space_name' => 'setSpaceName',
        'created' => 'setCreated',
        'member_id' => 'setMemberId',
        'member_ref_id' => 'setMemberRefId',
        'action' => 'setAction',
        'batch_id' => 'setBatchId',
        'entity_id' => 'setEntityId',
        'event_ref_id' => 'setEventRefId',
        'entity_ref_id' => 'setEntityRefId',
        'source_value' => 'setSourceValue',
        'points' => 'setPoints',
        'transaction_timestamp' => 'setTransactionTimestamp',
        'metadata' => 'setMetadata',
        'custom_fields' => 'setCustomFields',
        'tags' => 'setTags',
        'relates_to' => 'setRelatesTo',
        'relates_to_external' => 'setRelatesToExternal',
        'unit_of_measure' => 'setUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'space_name' => 'getSpaceName',
        'created' => 'getCreated',
        'member_id' => 'getMemberId',
        'member_ref_id' => 'getMemberRefId',
        'action' => 'getAction',
        'batch_id' => 'getBatchId',
        'entity_id' => 'getEntityId',
        'event_ref_id' => 'getEventRefId',
        'entity_ref_id' => 'getEntityRefId',
        'source_value' => 'getSourceValue',
        'points' => 'getPoints',
        'transaction_timestamp' => 'getTransactionTimestamp',
        'metadata' => 'getMetadata',
        'custom_fields' => 'getCustomFields',
        'tags' => 'getTags',
        'relates_to' => 'getRelatesTo',
        'relates_to_external' => 'getRelatesToExternal',
        'unit_of_measure' => 'getUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('space_name', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('member_id', $data ?? [], null);
        $this->setIfExists('member_ref_id', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('batch_id', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('event_ref_id', $data ?? [], null);
        $this->setIfExists('entity_ref_id', $data ?? [], null);
        $this->setIfExists('source_value', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('transaction_timestamp', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('relates_to', $data ?? [], null);
        $this->setIfExists('relates_to_external', $data ?? [], null);
        $this->setIfExists('unit_of_measure', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['space_name'] === null) {
            $invalidProperties[] = "'space_name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['source_value'] === null) {
            $invalidProperties[] = "'source_value' can't be null";
        }
        if ($this->container['points'] === null) {
            $invalidProperties[] = "'points' can't be null";
        }
        if ($this->container['transaction_timestamp'] === null) {
            $invalidProperties[] = "'transaction_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique system generated identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name This is the space name which is linked to the account
     *
     * @return self
     */
    public function setSpaceName($space_name)
    {
        if (is_null($space_name)) {
            throw new \InvalidArgumentException('non-nullable space_name cannot be null');
        }
        $this->container['space_name'] = $space_name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets member_id
     *
     * @return string|null
     */
    public function getMemberId()
    {
        return $this->container['member_id'];
    }

    /**
     * Sets member_id
     *
     * @param string|null $member_id Unique system identifier of a Member
     *
     * @return self
     */
    public function setMemberId($member_id)
    {
        if (is_null($member_id)) {
            throw new \InvalidArgumentException('non-nullable member_id cannot be null');
        }
        $this->container['member_id'] = $member_id;

        return $this;
    }

    /**
     * Gets member_ref_id
     *
     * @return string|null
     */
    public function getMemberRefId()
    {
        return $this->container['member_ref_id'];
    }

    /**
     * Sets member_ref_id
     *
     * @param string|null $member_ref_id The reference to this member in external system
     *
     * @return self
     */
    public function setMemberRefId($member_ref_id)
    {
        if (is_null($member_ref_id)) {
            throw new \InvalidArgumentException('non-nullable member_ref_id cannot be null');
        }
        $this->container['member_ref_id'] = $member_ref_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The identifier that describes the meaning of this event
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string|null $batch_id The batch identifier is used to group related event stream data together. This could be as simple as a UUID or your internal reference to that distinct player session event
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        if (is_null($batch_id)) {
            throw new \InvalidArgumentException('non-nullable batch_id cannot be null');
        }
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets event_ref_id
     *
     * @return string|null
     */
    public function getEventRefId()
    {
        return $this->container['event_ref_id'];
    }

    /**
     * Sets event_ref_id
     *
     * @param string|null $event_ref_id It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     *
     * @return self
     */
    public function setEventRefId($event_ref_id)
    {
        if (is_null($event_ref_id)) {
            throw new \InvalidArgumentException('non-nullable event_ref_id cannot be null');
        }
        $this->container['event_ref_id'] = $event_ref_id;

        return $this;
    }

    /**
     * Gets entity_ref_id
     *
     * @return string|null
     */
    public function getEntityRefId()
    {
        return $this->container['entity_ref_id'];
    }

    /**
     * Sets entity_ref_id
     *
     * @param string|null $entity_ref_id It is a reference to a models ID for any of the following objects - Product, Achievement, Reward, Award
     *
     * @return self
     */
    public function setEntityRefId($entity_ref_id)
    {
        if (is_null($entity_ref_id)) {
            throw new \InvalidArgumentException('non-nullable entity_ref_id cannot be null');
        }
        $this->container['entity_ref_id'] = $entity_ref_id;

        return $this;
    }

    /**
     * Gets source_value
     *
     * @return float
     */
    public function getSourceValue()
    {
        return $this->container['source_value'];
    }

    /**
     * Sets source_value
     *
     * @param float $source_value The actual numerical value related to the event
     *
     * @return self
     */
    public function setSourceValue($source_value)
    {
        if (is_null($source_value)) {
            throw new \InvalidArgumentException('non-nullable source_value cannot be null');
        }
        $this->container['source_value'] = $source_value;

        return $this;
    }

    /**
     * Gets points
     *
     * @return float
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param float $points A value derived from the source value field. In the context of Product additionally an adjustment factor will be applied
     *
     * @return self
     */
    public function setPoints($points)
    {
        if (is_null($points)) {
            throw new \InvalidArgumentException('non-nullable points cannot be null');
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets transaction_timestamp
     *
     * @return \DateTime
     */
    public function getTransactionTimestamp()
    {
        return $this->container['transaction_timestamp'];
    }

    /**
     * Sets transaction_timestamp
     *
     * @param \DateTime $transaction_timestamp ISO8601 timestamp for when this event happened. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setTransactionTimestamp($transaction_timestamp)
    {
        if (is_null($transaction_timestamp)) {
            throw new \InvalidArgumentException('non-nullable transaction_timestamp cannot be null');
        }
        $this->container['transaction_timestamp'] = $transaction_timestamp;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,mixed>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,mixed>|null $metadata Event metadata map.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of Strings of groups that the tag belongs to
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets relates_to
     *
     * @return string[]|null
     */
    public function getRelatesTo()
    {
        return $this->container['relates_to'];
    }

    /**
     * Sets relates_to
     *
     * @param string[]|null $relates_to relates_to
     *
     * @return self
     */
    public function setRelatesTo($relates_to)
    {
        if (is_null($relates_to)) {
            throw new \InvalidArgumentException('non-nullable relates_to cannot be null');
        }
        $this->container['relates_to'] = $relates_to;

        return $this;
    }

    /**
     * Gets relates_to_external
     *
     * @return string[]|null
     */
    public function getRelatesToExternal()
    {
        return $this->container['relates_to_external'];
    }

    /**
     * Sets relates_to_external
     *
     * @param string[]|null $relates_to_external relates_to_external
     *
     * @return self
     */
    public function setRelatesToExternal($relates_to_external)
    {
        if (is_null($relates_to_external)) {
            throw new \InvalidArgumentException('non-nullable relates_to_external cannot be null');
        }
        $this->container['relates_to_external'] = $relates_to_external;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return string|null
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param string|null $unit_of_measure The unit of measure is used to determine the type of the source value. It is used to normalize points values for currency based calculations by normalizing the source value.
     *
     * @return self
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        if (is_null($unit_of_measure)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measure cannot be null');
        }
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


