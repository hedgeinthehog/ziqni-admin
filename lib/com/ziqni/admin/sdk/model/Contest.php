<?php
/**
 * Contest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Contest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Contest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Contest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'space_name' => 'string',
        'created' => '\DateTime',
        'custom_fields' => 'array<string,mixed>',
        'tags' => 'string[]',
        'metadata' => 'array<string,string>',
        'competition_id' => 'string',
        'row' => 'int',
        'name' => 'string',
        'description' => 'string',
        'terms_and_conditions' => 'string',
        'round' => 'int',
        'round_type' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\RoundType',
        'entrants_from_contest' => 'string[]',
        'max_number_of_entrants' => 'int',
        'min_number_of_entrants' => 'int',
        'scheduled_start_date' => '\DateTime',
        'scheduled_end_date' => '\DateTime',
        'actual_start_date' => '\DateTime',
        'actual_end_date' => '\DateTime',
        'strategies' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\TournamentStrategies',
        'status' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus',
        'status_code' => 'int',
        'constraints' => 'string[]',
        'icon' => 'string',
        'banner' => 'string',
        'banner_low_resolution' => 'string',
        'banner_high_resolution' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'space_name' => null,
        'created' => 'date-time',
        'custom_fields' => null,
        'tags' => null,
        'metadata' => null,
        'competition_id' => null,
        'row' => 'int32',
        'name' => null,
        'description' => null,
        'terms_and_conditions' => null,
        'round' => 'int32',
        'round_type' => null,
        'entrants_from_contest' => null,
        'max_number_of_entrants' => 'int32',
        'min_number_of_entrants' => 'int32',
        'scheduled_start_date' => 'date-time',
        'scheduled_end_date' => 'date-time',
        'actual_start_date' => 'date-time',
        'actual_end_date' => 'date-time',
        'strategies' => null,
        'status' => null,
        'status_code' => null,
        'constraints' => null,
        'icon' => null,
        'banner' => null,
        'banner_low_resolution' => null,
        'banner_high_resolution' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'space_name' => false,
		'created' => false,
		'custom_fields' => false,
		'tags' => false,
		'metadata' => false,
		'competition_id' => false,
		'row' => false,
		'name' => false,
		'description' => false,
		'terms_and_conditions' => false,
		'round' => false,
		'round_type' => false,
		'entrants_from_contest' => false,
		'max_number_of_entrants' => false,
		'min_number_of_entrants' => false,
		'scheduled_start_date' => false,
		'scheduled_end_date' => false,
		'actual_start_date' => false,
		'actual_end_date' => false,
		'strategies' => false,
		'status' => false,
		'status_code' => false,
		'constraints' => false,
		'icon' => false,
		'banner' => false,
		'banner_low_resolution' => false,
		'banner_high_resolution' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'space_name' => 'spaceName',
        'created' => 'created',
        'custom_fields' => 'customFields',
        'tags' => 'tags',
        'metadata' => 'metadata',
        'competition_id' => 'competitionId',
        'row' => 'row',
        'name' => 'name',
        'description' => 'description',
        'terms_and_conditions' => 'termsAndConditions',
        'round' => 'round',
        'round_type' => 'roundType',
        'entrants_from_contest' => 'entrantsFromContest',
        'max_number_of_entrants' => 'maxNumberOfEntrants',
        'min_number_of_entrants' => 'minNumberOfEntrants',
        'scheduled_start_date' => 'scheduledStartDate',
        'scheduled_end_date' => 'scheduledEndDate',
        'actual_start_date' => 'actualStartDate',
        'actual_end_date' => 'actualEndDate',
        'strategies' => 'strategies',
        'status' => 'status',
        'status_code' => 'statusCode',
        'constraints' => 'constraints',
        'icon' => 'icon',
        'banner' => 'banner',
        'banner_low_resolution' => 'bannerLowResolution',
        'banner_high_resolution' => 'bannerHighResolution'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'space_name' => 'setSpaceName',
        'created' => 'setCreated',
        'custom_fields' => 'setCustomFields',
        'tags' => 'setTags',
        'metadata' => 'setMetadata',
        'competition_id' => 'setCompetitionId',
        'row' => 'setRow',
        'name' => 'setName',
        'description' => 'setDescription',
        'terms_and_conditions' => 'setTermsAndConditions',
        'round' => 'setRound',
        'round_type' => 'setRoundType',
        'entrants_from_contest' => 'setEntrantsFromContest',
        'max_number_of_entrants' => 'setMaxNumberOfEntrants',
        'min_number_of_entrants' => 'setMinNumberOfEntrants',
        'scheduled_start_date' => 'setScheduledStartDate',
        'scheduled_end_date' => 'setScheduledEndDate',
        'actual_start_date' => 'setActualStartDate',
        'actual_end_date' => 'setActualEndDate',
        'strategies' => 'setStrategies',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode',
        'constraints' => 'setConstraints',
        'icon' => 'setIcon',
        'banner' => 'setBanner',
        'banner_low_resolution' => 'setBannerLowResolution',
        'banner_high_resolution' => 'setBannerHighResolution'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'space_name' => 'getSpaceName',
        'created' => 'getCreated',
        'custom_fields' => 'getCustomFields',
        'tags' => 'getTags',
        'metadata' => 'getMetadata',
        'competition_id' => 'getCompetitionId',
        'row' => 'getRow',
        'name' => 'getName',
        'description' => 'getDescription',
        'terms_and_conditions' => 'getTermsAndConditions',
        'round' => 'getRound',
        'round_type' => 'getRoundType',
        'entrants_from_contest' => 'getEntrantsFromContest',
        'max_number_of_entrants' => 'getMaxNumberOfEntrants',
        'min_number_of_entrants' => 'getMinNumberOfEntrants',
        'scheduled_start_date' => 'getScheduledStartDate',
        'scheduled_end_date' => 'getScheduledEndDate',
        'actual_start_date' => 'getActualStartDate',
        'actual_end_date' => 'getActualEndDate',
        'strategies' => 'getStrategies',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode',
        'constraints' => 'getConstraints',
        'icon' => 'getIcon',
        'banner' => 'getBanner',
        'banner_low_resolution' => 'getBannerLowResolution',
        'banner_high_resolution' => 'getBannerHighResolution'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('space_name', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('competition_id', $data ?? [], null);
        $this->setIfExists('row', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('terms_and_conditions', $data ?? [], null);
        $this->setIfExists('round', $data ?? [], null);
        $this->setIfExists('round_type', $data ?? [], null);
        $this->setIfExists('entrants_from_contest', $data ?? [], null);
        $this->setIfExists('max_number_of_entrants', $data ?? [], null);
        $this->setIfExists('min_number_of_entrants', $data ?? [], null);
        $this->setIfExists('scheduled_start_date', $data ?? [], null);
        $this->setIfExists('scheduled_end_date', $data ?? [], null);
        $this->setIfExists('actual_start_date', $data ?? [], null);
        $this->setIfExists('actual_end_date', $data ?? [], null);
        $this->setIfExists('strategies', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('constraints', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('banner', $data ?? [], null);
        $this->setIfExists('banner_low_resolution', $data ?? [], null);
        $this->setIfExists('banner_high_resolution', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['space_name'] === null) {
            $invalidProperties[] = "'space_name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['competition_id'] === null) {
            $invalidProperties[] = "'competition_id' can't be null";
        }
        if ($this->container['row'] === null) {
            $invalidProperties[] = "'row' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['round'] === null) {
            $invalidProperties[] = "'round' can't be null";
        }
        if ($this->container['round_type'] === null) {
            $invalidProperties[] = "'round_type' can't be null";
        }
        if ($this->container['entrants_from_contest'] === null) {
            $invalidProperties[] = "'entrants_from_contest' can't be null";
        }
        if ($this->container['min_number_of_entrants'] === null) {
            $invalidProperties[] = "'min_number_of_entrants' can't be null";
        }
        if ($this->container['scheduled_start_date'] === null) {
            $invalidProperties[] = "'scheduled_start_date' can't be null";
        }
        if ($this->container['scheduled_end_date'] === null) {
            $invalidProperties[] = "'scheduled_end_date' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        if ($this->container['constraints'] === null) {
            $invalidProperties[] = "'constraints' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique system generated identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name This is the space name which is linked to the account
     *
     * @return self
     */
    public function setSpaceName($space_name)
    {
        if (is_null($space_name)) {
            throw new \InvalidArgumentException('non-nullable space_name cannot be null');
        }
        $this->container['space_name'] = $space_name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of id's used to tag models
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets competition_id
     *
     * @return string
     */
    public function getCompetitionId()
    {
        return $this->container['competition_id'];
    }

    /**
     * Sets competition_id
     *
     * @param string $competition_id A unique identifier of a Competition
     *
     * @return self
     */
    public function setCompetitionId($competition_id)
    {
        if (is_null($competition_id)) {
            throw new \InvalidArgumentException('non-nullable competition_id cannot be null');
        }
        $this->container['competition_id'] = $competition_id;

        return $this;
    }

    /**
     * Gets row
     *
     * @return int
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     *
     * @param int $row The row number for displaying the Contest in a table
     *
     * @return self
     */
    public function setRow($row)
    {
        if (is_null($row)) {
            throw new \InvalidArgumentException('non-nullable row cannot be null');
        }
        $this->container['row'] = $row;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A name for the Contest. Can be translated
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Description of the contest
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets terms_and_conditions
     *
     * @return string|null
     */
    public function getTermsAndConditions()
    {
        return $this->container['terms_and_conditions'];
    }

    /**
     * Sets terms_and_conditions
     *
     * @param string|null $terms_and_conditions Terms and conditions for participating in the Contest. Can be translated
     *
     * @return self
     */
    public function setTermsAndConditions($terms_and_conditions)
    {
        if (is_null($terms_and_conditions)) {
            throw new \InvalidArgumentException('non-nullable terms_and_conditions cannot be null');
        }
        $this->container['terms_and_conditions'] = $terms_and_conditions;

        return $this;
    }

    /**
     * Gets round
     *
     * @return int
     */
    public function getRound()
    {
        return $this->container['round'];
    }

    /**
     * Sets round
     *
     * @param int $round To what round does the contest belong
     *
     * @return self
     */
    public function setRound($round)
    {
        if (is_null($round)) {
            throw new \InvalidArgumentException('non-nullable round cannot be null');
        }
        $this->container['round'] = $round;

        return $this;
    }

    /**
     * Gets round_type
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\RoundType
     */
    public function getRoundType()
    {
        return $this->container['round_type'];
    }

    /**
     * Sets round_type
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\RoundType $round_type round_type
     *
     * @return self
     */
    public function setRoundType($round_type)
    {
        if (is_null($round_type)) {
            throw new \InvalidArgumentException('non-nullable round_type cannot be null');
        }
        $this->container['round_type'] = $round_type;

        return $this;
    }

    /**
     * Gets entrants_from_contest
     *
     * @return string[]
     */
    public function getEntrantsFromContest()
    {
        return $this->container['entrants_from_contest'];
    }

    /**
     * Sets entrants_from_contest
     *
     * @param string[] $entrants_from_contest A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
     *
     * @return self
     */
    public function setEntrantsFromContest($entrants_from_contest)
    {
        if (is_null($entrants_from_contest)) {
            throw new \InvalidArgumentException('non-nullable entrants_from_contest cannot be null');
        }
        $this->container['entrants_from_contest'] = $entrants_from_contest;

        return $this;
    }

    /**
     * Gets max_number_of_entrants
     *
     * @return int|null
     */
    public function getMaxNumberOfEntrants()
    {
        return $this->container['max_number_of_entrants'];
    }

    /**
     * Sets max_number_of_entrants
     *
     * @param int|null $max_number_of_entrants Maximum number of entrants for the contest
     *
     * @return self
     */
    public function setMaxNumberOfEntrants($max_number_of_entrants)
    {
        if (is_null($max_number_of_entrants)) {
            throw new \InvalidArgumentException('non-nullable max_number_of_entrants cannot be null');
        }
        $this->container['max_number_of_entrants'] = $max_number_of_entrants;

        return $this;
    }

    /**
     * Gets min_number_of_entrants
     *
     * @return int
     */
    public function getMinNumberOfEntrants()
    {
        return $this->container['min_number_of_entrants'];
    }

    /**
     * Sets min_number_of_entrants
     *
     * @param int $min_number_of_entrants Minimum number of entrants for the contest
     *
     * @return self
     */
    public function setMinNumberOfEntrants($min_number_of_entrants)
    {
        if (is_null($min_number_of_entrants)) {
            throw new \InvalidArgumentException('non-nullable min_number_of_entrants cannot be null');
        }
        $this->container['min_number_of_entrants'] = $min_number_of_entrants;

        return $this;
    }

    /**
     * Gets scheduled_start_date
     *
     * @return \DateTime
     */
    public function getScheduledStartDate()
    {
        return $this->container['scheduled_start_date'];
    }

    /**
     * Sets scheduled_start_date
     *
     * @param \DateTime $scheduled_start_date ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setScheduledStartDate($scheduled_start_date)
    {
        if (is_null($scheduled_start_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_start_date cannot be null');
        }
        $this->container['scheduled_start_date'] = $scheduled_start_date;

        return $this;
    }

    /**
     * Gets scheduled_end_date
     *
     * @return \DateTime
     */
    public function getScheduledEndDate()
    {
        return $this->container['scheduled_end_date'];
    }

    /**
     * Sets scheduled_end_date
     *
     * @param \DateTime $scheduled_end_date ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setScheduledEndDate($scheduled_end_date)
    {
        if (is_null($scheduled_end_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_end_date cannot be null');
        }
        $this->container['scheduled_end_date'] = $scheduled_end_date;

        return $this;
    }

    /**
     * Gets actual_start_date
     *
     * @return \DateTime|null
     */
    public function getActualStartDate()
    {
        return $this->container['actual_start_date'];
    }

    /**
     * Sets actual_start_date
     *
     * @param \DateTime|null $actual_start_date ISO8601 timestamp for when a Competition started. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setActualStartDate($actual_start_date)
    {
        if (is_null($actual_start_date)) {
            throw new \InvalidArgumentException('non-nullable actual_start_date cannot be null');
        }
        $this->container['actual_start_date'] = $actual_start_date;

        return $this;
    }

    /**
     * Gets actual_end_date
     *
     * @return \DateTime|null
     */
    public function getActualEndDate()
    {
        return $this->container['actual_end_date'];
    }

    /**
     * Sets actual_end_date
     *
     * @param \DateTime|null $actual_end_date ISO8601 timestamp for when a Competition ended. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setActualEndDate($actual_end_date)
    {
        if (is_null($actual_end_date)) {
            throw new \InvalidArgumentException('non-nullable actual_end_date cannot be null');
        }
        $this->container['actual_end_date'] = $actual_end_date;

        return $this;
    }

    /**
     * Gets strategies
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\TournamentStrategies|null
     */
    public function getStrategies()
    {
        return $this->container['strategies'];
    }

    /**
     * Sets strategies
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\TournamentStrategies|null $strategies strategies
     *
     * @return self
     */
    public function setStrategies($strategies)
    {
        if (is_null($strategies)) {
            throw new \InvalidArgumentException('non-nullable strategies cannot be null');
        }
        $this->container['strategies'] = $strategies;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code The code of the contest
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets constraints
     *
     * @return string[]
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     *
     * @param string[] $constraints Additional constraints
     *
     * @return self
     */
    public function setConstraints($constraints)
    {
        if (is_null($constraints)) {
            throw new \InvalidArgumentException('non-nullable constraints cannot be null');
        }
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon Link to the icon
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets banner
     *
     * @return string|null
     */
    public function getBanner()
    {
        return $this->container['banner'];
    }

    /**
     * Sets banner
     *
     * @param string|null $banner Link to the banner
     *
     * @return self
     */
    public function setBanner($banner)
    {
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets banner_low_resolution
     *
     * @return string|null
     */
    public function getBannerLowResolution()
    {
        return $this->container['banner_low_resolution'];
    }

    /**
     * Sets banner_low_resolution
     *
     * @param string|null $banner_low_resolution Link to the bannerLowResolution
     *
     * @return self
     */
    public function setBannerLowResolution($banner_low_resolution)
    {
        if (is_null($banner_low_resolution)) {
            throw new \InvalidArgumentException('non-nullable banner_low_resolution cannot be null');
        }
        $this->container['banner_low_resolution'] = $banner_low_resolution;

        return $this;
    }

    /**
     * Gets banner_high_resolution
     *
     * @return string|null
     */
    public function getBannerHighResolution()
    {
        return $this->container['banner_high_resolution'];
    }

    /**
     * Sets banner_high_resolution
     *
     * @param string|null $banner_high_resolution Link to the bannerHighResolution
     *
     * @return self
     */
    public function setBannerHighResolution($banner_high_resolution)
    {
        if (is_null($banner_high_resolution)) {
            throw new \InvalidArgumentException('non-nullable banner_high_resolution cannot be null');
        }
        $this->container['banner_high_resolution'] = $banner_high_resolution;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


