<?php
/**
 * ContestReduced
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ContestReduced Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContestReduced implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ContestReduced';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'space_name' => 'string',
        'created' => '\DateTime',
        'competition_id' => 'string',
        'row' => 'int',
        'name' => 'string',
        'round' => 'int',
        'group_stage' => 'int',
        'entrants_from_contest' => 'string[]',
        'status' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus',
        'status_code' => 'int',
        'scheduled_start_date' => '\DateTime',
        'scheduled_end_date' => '\DateTime',
        'actual_start_date' => '\DateTime',
        'actual_end_date' => '\DateTime',
        'tags' => 'string[]',
        'rewards' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\RewardReduced[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'space_name' => null,
        'created' => 'date-time',
        'competition_id' => null,
        'row' => 'int32',
        'name' => null,
        'round' => 'int32',
        'group_stage' => 'int32',
        'entrants_from_contest' => null,
        'status' => null,
        'status_code' => null,
        'scheduled_start_date' => 'date-time',
        'scheduled_end_date' => 'date-time',
        'actual_start_date' => 'date-time',
        'actual_end_date' => 'date-time',
        'tags' => null,
        'rewards' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'space_name' => false,
		'created' => false,
		'competition_id' => false,
		'row' => false,
		'name' => false,
		'round' => false,
		'group_stage' => false,
		'entrants_from_contest' => false,
		'status' => false,
		'status_code' => false,
		'scheduled_start_date' => false,
		'scheduled_end_date' => false,
		'actual_start_date' => false,
		'actual_end_date' => false,
		'tags' => false,
		'rewards' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'space_name' => 'spaceName',
        'created' => 'created',
        'competition_id' => 'competitionId',
        'row' => 'row',
        'name' => 'name',
        'round' => 'round',
        'group_stage' => 'groupStage',
        'entrants_from_contest' => 'entrantsFromContest',
        'status' => 'status',
        'status_code' => 'statusCode',
        'scheduled_start_date' => 'scheduledStartDate',
        'scheduled_end_date' => 'scheduledEndDate',
        'actual_start_date' => 'actualStartDate',
        'actual_end_date' => 'actualEndDate',
        'tags' => 'tags',
        'rewards' => 'rewards'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'space_name' => 'setSpaceName',
        'created' => 'setCreated',
        'competition_id' => 'setCompetitionId',
        'row' => 'setRow',
        'name' => 'setName',
        'round' => 'setRound',
        'group_stage' => 'setGroupStage',
        'entrants_from_contest' => 'setEntrantsFromContest',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode',
        'scheduled_start_date' => 'setScheduledStartDate',
        'scheduled_end_date' => 'setScheduledEndDate',
        'actual_start_date' => 'setActualStartDate',
        'actual_end_date' => 'setActualEndDate',
        'tags' => 'setTags',
        'rewards' => 'setRewards'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'space_name' => 'getSpaceName',
        'created' => 'getCreated',
        'competition_id' => 'getCompetitionId',
        'row' => 'getRow',
        'name' => 'getName',
        'round' => 'getRound',
        'group_stage' => 'getGroupStage',
        'entrants_from_contest' => 'getEntrantsFromContest',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode',
        'scheduled_start_date' => 'getScheduledStartDate',
        'scheduled_end_date' => 'getScheduledEndDate',
        'actual_start_date' => 'getActualStartDate',
        'actual_end_date' => 'getActualEndDate',
        'tags' => 'getTags',
        'rewards' => 'getRewards'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('space_name', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('competition_id', $data ?? [], null);
        $this->setIfExists('row', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('round', $data ?? [], null);
        $this->setIfExists('group_stage', $data ?? [], null);
        $this->setIfExists('entrants_from_contest', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('status_code', $data ?? [], null);
        $this->setIfExists('scheduled_start_date', $data ?? [], null);
        $this->setIfExists('scheduled_end_date', $data ?? [], null);
        $this->setIfExists('actual_start_date', $data ?? [], null);
        $this->setIfExists('actual_end_date', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('rewards', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['space_name'] === null) {
            $invalidProperties[] = "'space_name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['competition_id'] === null) {
            $invalidProperties[] = "'competition_id' can't be null";
        }
        if ($this->container['row'] === null) {
            $invalidProperties[] = "'row' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['round'] === null) {
            $invalidProperties[] = "'round' can't be null";
        }
        if ($this->container['group_stage'] === null) {
            $invalidProperties[] = "'group_stage' can't be null";
        }
        if ($this->container['entrants_from_contest'] === null) {
            $invalidProperties[] = "'entrants_from_contest' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['status_code'] === null) {
            $invalidProperties[] = "'status_code' can't be null";
        }
        if ($this->container['scheduled_start_date'] === null) {
            $invalidProperties[] = "'scheduled_start_date' can't be null";
        }
        if ($this->container['scheduled_end_date'] === null) {
            $invalidProperties[] = "'scheduled_end_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique system generated identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name This is the space name which is linked to the account
     *
     * @return self
     */
    public function setSpaceName($space_name)
    {
        if (is_null($space_name)) {
            throw new \InvalidArgumentException('non-nullable space_name cannot be null');
        }
        $this->container['space_name'] = $space_name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets competition_id
     *
     * @return string
     */
    public function getCompetitionId()
    {
        return $this->container['competition_id'];
    }

    /**
     * Sets competition_id
     *
     * @param string $competition_id A unique identifier of a Competition
     *
     * @return self
     */
    public function setCompetitionId($competition_id)
    {
        if (is_null($competition_id)) {
            throw new \InvalidArgumentException('non-nullable competition_id cannot be null');
        }
        $this->container['competition_id'] = $competition_id;

        return $this;
    }

    /**
     * Gets row
     *
     * @return int
     */
    public function getRow()
    {
        return $this->container['row'];
    }

    /**
     * Sets row
     *
     * @param int $row The row number for displaying the Contest in a table
     *
     * @return self
     */
    public function setRow($row)
    {
        if (is_null($row)) {
            throw new \InvalidArgumentException('non-nullable row cannot be null');
        }
        $this->container['row'] = $row;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name A name for the Contest. Can be translated
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets round
     *
     * @return int
     */
    public function getRound()
    {
        return $this->container['round'];
    }

    /**
     * Sets round
     *
     * @param int $round To what round does the contest belong
     *
     * @return self
     */
    public function setRound($round)
    {
        if (is_null($round)) {
            throw new \InvalidArgumentException('non-nullable round cannot be null');
        }
        $this->container['round'] = $round;

        return $this;
    }

    /**
     * Gets group_stage
     *
     * @return int
     */
    public function getGroupStage()
    {
        return $this->container['group_stage'];
    }

    /**
     * Sets group_stage
     *
     * @param int $group_stage Is used for more complex Competitions e.g. multi round competitions where round 1 group stage matched round 2
     *
     * @return self
     */
    public function setGroupStage($group_stage)
    {
        if (is_null($group_stage)) {
            throw new \InvalidArgumentException('non-nullable group_stage cannot be null');
        }
        $this->container['group_stage'] = $group_stage;

        return $this;
    }

    /**
     * Gets entrants_from_contest
     *
     * @return string[]
     */
    public function getEntrantsFromContest()
    {
        return $this->container['entrants_from_contest'];
    }

    /**
     * Sets entrants_from_contest
     *
     * @param string[] $entrants_from_contest A list of Ziqni contest identifiers to allow contests chaining. When a Progression competition is active and you have a 2 round competition the first round has to reference the second round then this parameter becomes mandatory instead of Optional.
     *
     * @return self
     */
    public function setEntrantsFromContest($entrants_from_contest)
    {
        if (is_null($entrants_from_contest)) {
            throw new \InvalidArgumentException('non-nullable entrants_from_contest cannot be null');
        }
        $this->container['entrants_from_contest'] = $entrants_from_contest;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\ContestStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code The code of the contest
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        if (is_null($status_code)) {
            throw new \InvalidArgumentException('non-nullable status_code cannot be null');
        }
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets scheduled_start_date
     *
     * @return \DateTime
     */
    public function getScheduledStartDate()
    {
        return $this->container['scheduled_start_date'];
    }

    /**
     * Sets scheduled_start_date
     *
     * @param \DateTime $scheduled_start_date ISO8601 timestamp for when a Contest should start. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setScheduledStartDate($scheduled_start_date)
    {
        if (is_null($scheduled_start_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_start_date cannot be null');
        }
        $this->container['scheduled_start_date'] = $scheduled_start_date;

        return $this;
    }

    /**
     * Gets scheduled_end_date
     *
     * @return \DateTime
     */
    public function getScheduledEndDate()
    {
        return $this->container['scheduled_end_date'];
    }

    /**
     * Sets scheduled_end_date
     *
     * @param \DateTime $scheduled_end_date ISO8601 timestamp for when a Contest should end. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setScheduledEndDate($scheduled_end_date)
    {
        if (is_null($scheduled_end_date)) {
            throw new \InvalidArgumentException('non-nullable scheduled_end_date cannot be null');
        }
        $this->container['scheduled_end_date'] = $scheduled_end_date;

        return $this;
    }

    /**
     * Gets actual_start_date
     *
     * @return \DateTime|null
     */
    public function getActualStartDate()
    {
        return $this->container['actual_start_date'];
    }

    /**
     * Sets actual_start_date
     *
     * @param \DateTime|null $actual_start_date ISO8601 timestamp for when a Contest started. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setActualStartDate($actual_start_date)
    {
        if (is_null($actual_start_date)) {
            throw new \InvalidArgumentException('non-nullable actual_start_date cannot be null');
        }
        $this->container['actual_start_date'] = $actual_start_date;

        return $this;
    }

    /**
     * Gets actual_end_date
     *
     * @return \DateTime|null
     */
    public function getActualEndDate()
    {
        return $this->container['actual_end_date'];
    }

    /**
     * Sets actual_end_date
     *
     * @param \DateTime|null $actual_end_date ISO8601 timestamp for when a Contest ended. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setActualEndDate($actual_end_date)
    {
        if (is_null($actual_end_date)) {
            throw new \InvalidArgumentException('non-nullable actual_end_date cannot be null');
        }
        $this->container['actual_end_date'] = $actual_end_date;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of id's used to tag
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets rewards
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\RewardReduced[]|null
     */
    public function getRewards()
    {
        return $this->container['rewards'];
    }

    /**
     * Sets rewards
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\RewardReduced[]|null $rewards 
     *
     * @return self
     */
    public function setRewards($rewards)
    {
        if (is_null($rewards)) {
            throw new \InvalidArgumentException('non-nullable rewards cannot be null');
        }
        $this->container['rewards'] = $rewards;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


