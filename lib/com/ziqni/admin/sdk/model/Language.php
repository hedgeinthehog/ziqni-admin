<?php
/**
 * Language
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Language Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Language implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Language';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'space_name' => 'string',
        'created' => '\DateTime',
        'key' => 'string',
        'name' => 'string',
        'custom_fields' => 'array<string,mixed>',
        'tags' => 'string[]',
        'metadata' => 'array<string,string>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'space_name' => null,
        'created' => 'date-time',
        'key' => null,
        'name' => null,
        'custom_fields' => null,
        'tags' => null,
        'metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'space_name' => false,
		'created' => false,
		'key' => false,
		'name' => false,
		'custom_fields' => false,
		'tags' => false,
		'metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'space_name' => 'spaceName',
        'created' => 'created',
        'key' => 'key',
        'name' => 'name',
        'custom_fields' => 'customFields',
        'tags' => 'tags',
        'metadata' => 'metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'space_name' => 'setSpaceName',
        'created' => 'setCreated',
        'key' => 'setKey',
        'name' => 'setName',
        'custom_fields' => 'setCustomFields',
        'tags' => 'setTags',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'space_name' => 'getSpaceName',
        'created' => 'getCreated',
        'key' => 'getKey',
        'name' => 'getName',
        'custom_fields' => 'getCustomFields',
        'tags' => 'getTags',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('space_name', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['space_name'] === null) {
            $invalidProperties[] = "'space_name' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id A unique system generated identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets space_name
     *
     * @return string
     */
    public function getSpaceName()
    {
        return $this->container['space_name'];
    }

    /**
     * Sets space_name
     *
     * @param string $space_name This is the space name which is linked to the account
     *
     * @return self
     */
    public function setSpaceName($space_name)
    {
        if (is_null($space_name)) {
            throw new \InvalidArgumentException('non-nullable space_name cannot be null');
        }
        $this->container['space_name'] = $space_name;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created ISO8601 timestamp for when a Model was created. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key The key of a language
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The key of a language * \"aa\" -> \"Afar\", * \"ab\" -> \"Abkhazian\", * \"ace\" -> \"Achinese\", * \"ach\" -> \"Acoli\", * \"ada\" -> \"Adangme\", * \"ady\" -> \"Adyghe\", * \"ae\" -> \"Avestan\", * \"aeb\" -> \"Tunisian Arabic\", * \"af\" -> \"Afrikaans\", * \"afh\" -> \"Afrihili\", * \"agq\" -> \"Aghem\", * \"ain\" -> \"Ainu\", * \"ak\" -> \"Akan\", * \"akk\" -> \"Akkadian\", * \"akz\" -> \"Alabama\", * \"ale\" -> \"Aleut\", * \"aln\" -> \"Gheg Albanian\", * \"alt\" -> \"Southern Altai\", * \"am\" -> \"Amharic\", * \"an\" -> \"Aragonese\", * \"ang\" -> \"Old English\", * \"anp\" -> \"Angika\", * \"ar\" -> \"Arabic\", * \"ar-DZ\" -> \"Arabic (Algeria)\", * \"ar-BH\" -> \"Arabic (Bahrain)\", * \"ar-EG\" -> \"Arabic (Egypt)\", * \"ar-IQ\" -> \"Arabic (Iraq)\", * \"ar-JO\" -> \"Arabic (Jordan)\", * \"ar-KW\" -> \"Arabic (Kuwait)\", * \"ar-LB\" -> \"Arabic (Lebanon)\", * \"ar-LY\" -> \"Arabic (Libya)\", * \"ar-MA\" -> \"Arabic (Morocco)\", * \"ar-OM\" -> \"Arabic (Oman)\", * \"ar-QA\" -> \"Arabic (Qatar)\", * \"ar-SA\" -> \"Arabic (Saudi Arabia)\", * \"ar-SY\" -> \"Arabic (Syria)\", * \"ar-TN\" -> \"Arabic (Tunisia)\", * \"ar-AE\" -> \"Arabic (U.A.E.)\", * \"ar-YE\" -> \"Arabic (Yemen)\", * \"ar-001\" -> \"Modern Standard Arabic\", * \"arc\" -> \"Aramaic\", * \"arn\" -> \"Mapuche\", * \"aro\" -> \"Araona\", * \"arp\" -> \"Arapaho\", * \"arq\" -> \"Algerian Arabic\", * \"ars\" -> \"Najdi Arabic\", * \"arw\" -> \"Arawak\", * \"ary\" -> \"Moroccan Arabic\", * \"arz\" -> \"Egyptian Arabic\", * \"as\" -> \"Assamese\", * \"asa\" -> \"Asu\", * \"ase\" -> \"American Sign Language\", * \"ast\" -> \"Asturian\", * \"av\" -> \"Avaric\", * \"avk\" -> \"Kotava\", * \"awa\" -> \"Awadhi\", * \"ay\" -> \"Aymara\", * \"az\" -> \"Azerbaijani\", * \"ba\" -> \"Bashkir\", * \"bal\" -> \"Baluchi\", * \"ban\" -> \"Balinese\", * \"bar\" -> \"Bavarian\", * \"bas\" -> \"Basaa\", * \"bax\" -> \"Bamun\", * \"bbc\" -> \"Batak Toba\", * \"bbj\" -> \"Ghomala\", * \"be\" -> \"Belarusian\", * \"bej\" -> \"Beja\", * \"bem\" -> \"Bemba\", * \"bew\" -> \"Betawi\", * \"bez\" -> \"Bena\", * \"bfd\" -> \"Bafut\", * \"bfq\" -> \"Badaga\", * \"bg\" -> \"Bulgarian\", * \"bgn\" -> \"Western Balochi\", * \"bho\" -> \"Bhojpuri\", * \"bi\" -> \"Bislama\", * \"bik\" -> \"Bikol\", * \"bin\" -> \"Bini\", * \"bjn\" -> \"Banjar\", * \"bkm\" -> \"Kom\", * \"bla\" -> \"Siksika\", * \"bm\" -> \"Bambara\", * \"bn\" -> \"Bangla\", * \"bo\" -> \"Tibetan\", * \"bpy\" -> \"Bishnupriya\", * \"bqi\" -> \"Bakhtiari\", * \"br\" -> \"Breton\", * \"bra\" -> \"Braj\", * \"brh\" -> \"Brahui\", * \"brx\" -> \"Bodo\", * \"bs\" -> \"Bosnian\", * \"bss\" -> \"Akoose\", * \"bua\" -> \"Buriat\", * \"bug\" -> \"Buginese\", * \"bum\" -> \"Bulu\", * \"byn\" -> \"Blin\", * \"byv\" -> \"Medumba\", * \"ca\" -> \"Catalan\", * \"cad\" -> \"Caddo\", * \"car\" -> \"Carib\", * \"cay\" -> \"Cayuga\", * \"cch\" -> \"Atsam\", * \"ccp\" -> \"Chakma\", * \"ce\" -> \"Chechen\", * \"ceb\" -> \"Cebuano\", * \"cgg\" -> \"Chiga\", * \"ch\" -> \"Chamorro\", * \"chb\" -> \"Chibcha\", * \"chg\" -> \"Chagatai\", * \"chk\" -> \"Chuukese\", * \"chm\" -> \"Mari\", * \"chn\" -> \"Chinook Jargon\", * \"cho\" -> \"Choctaw\", * \"chp\" -> \"Chipewyan\", * \"chr\" -> \"Cherokee\", * \"chy\" -> \"Cheyenne\", * \"ckb\" -> \"Central Kurdish\", * \"co\" -> \"Corsican\", * \"cop\" -> \"Coptic\", * \"cps\" -> \"Capiznon\", * \"cr\" -> \"Cree\", * \"crh\" -> \"Crimean Turkish\", * \"crs\" -> \"Seselwa Creole French\", * \"cs\" -> \"Czech\", * \"csb\" -> \"Kashubian\", * \"cu\" -> \"Church Slavic\", * \"cv\" -> \"Chuvash\", * \"cy\" -> \"Welsh\", * \"da\" -> \"Danish\", * \"dak\" -> \"Dakota\", * \"dar\" -> \"Dargwa\", * \"dav\" -> \"Taita\", * \"de\" -> \"German\", * \"de-at\" -> \"German (Austria)\", * \"de-de\" -> \"German (Germany)\", * \"de-li\" -> \"German (Liechtenstein)\", * \"de-lu\" -> \"German (Luxembourg)\", * \"de-ch\" -> \"German (Switzerland)\", * \"del\" -> \"Delaware\", * \"den\" -> \"Slave\", * \"dgr\" -> \"Dogrib\", * \"din\" -> \"Dinka\", * \"dje\" -> \"Zarma\", * \"doi\" -> \"Dogri\", * \"dsb\" -> \"Lower Sorbian\", * \"dtp\" -> \"Central Dusun\", * \"dua\" -> \"Duala\", * \"dum\" -> \"Middle Dutch\", * \"dv\" -> \"Divehi\", * \"dyo\" -> \"Jola-Fonyi\", * \"dyu\" -> \"Dyula\", * \"dz\" -> \"Dzongkha\", * \"dzg\" -> \"Dazaga\", * \"ebu\" -> \"Embu\", * \"ee\" -> \"Ewe\", * \"efi\" -> \"Efik\", * \"egl\" -> \"Emilian\", * \"egy\" -> \"Ancient Egyptian\", * \"eka\" -> \"Ekajuk\", * \"el\" -> \"Greek\", * \"elx\" -> \"Elamite\", * \"en\" -> \"English\", * \"en-AU\" -> \"English (Australia)\", * \"en-BZ\" -> \"English (Belize)\", * \"en-CA\" -> \"English (Canada)\", * \"en-IE\" -> \"English (Ireland)\", * \"en-JM\" -> \"English (Jamaica)\", * \"en-NZ\" -> \"English (New Zealand)\", * \"en-PH\" -> \"English (Philippines)\", * \"en-ZA\" -> \"English (South Africa)\", * \"en-TT\" -> \"English (Trinidad & Tobago)\", * \"en-GB\" -> \"English (United Kingdom)\", * \"en-US\" -> \"English (United States)\", * \"en-ZW\" -> \"English (Zimbabwe)\", * \"enm\" -> \"Middle English\", * \"eo\" -> \"Esperanto\", * \"es\" -> \"Spanish\", * \"es-419\" -> \"Latin American Spanish\", * \"es-ES\" -> \"European Spanish\", * \"es-MX\" -> \"Mexican Spanish\", * \"es-PE\" -> \"Spanish Peru\", * \"es-NI\" -> \"Spanish Nicaragua\", * \"es-PA\" -> \"Spanish Panama\", * \"es-PR\" -> \"Spanish Puerto Rico\", * \"es-PY\" -> \"Spanish Paraguay\", * \"es-SV\" -> \"Spanish El Salvador\", * \"es-UY\" -> \"Spanish Uruguay\", * \"es-VE\" -> \"Spanish Venezuela\", * \"esu\" -> \"Central Yupik\", * \"et\" -> \"Estonian\", * \"eu\" -> \"Basque\", * \"ewo\" -> \"Ewondo\", * \"ext\" -> \"Extremaduran\", * \"fa\" -> \"Persian\", * \"fa-AF\" -> \"Dari\", * \"fan\" -> \"Fang\", * \"fat\" -> \"Fanti\", * \"ff\" -> \"Fulah\", * \"fi\" -> \"Finnish\", * \"fil\" -> \"Filipino\", * \"fit\" -> \"Tornedalen Finnish\", * \"fj\" -> \"Fijian\", * \"fo\" -> \"Faroese\", * \"fon\" -> \"Fon\", * \"fr\" -> \"French\", * \"fr-BE\" -> \"French (Belgium)\", * \"fr-CA\" -> \"French (Canada)\", * \"fr-FR\" -> \"French (France)\", * \"fr-LU\" -> \"French (Luxembourg)\", * \"fr-MC\" -> \"French (Monaco)\", * \"fr-CH\" -> \"French (Switzerland)\", * \"frc\" -> \"Cajun French\", * \"frm\" -> \"Middle French\", * \"fro\" -> \"Old French\", * \"frp\" -> \"Arpitan\", * \"frr\" -> \"Northern Frisian\", * \"frs\" -> \"Eastern Frisian\", * \"fur\" -> \"Friulian\", * \"fy\" -> \"Western Frisian\", * \"ga\" -> \"Irish\", * \"gaa\" -> \"Ga\", * \"gag\" -> \"Gagauz\", * \"gan\" -> \"Gan Chinese\", * \"gay\" -> \"Gayo\", * \"gba\" -> \"Gbaya\", * \"gbz\" -> \"Zoroastrian Dari\", * \"gd\" -> \"Gaelic (Scottish)\", * \"gd-IE\" -> \"Gaelic (Irish)\", * \"gez\" -> \"Geez\", * \"gil\" -> \"Gilbertese\", * \"gl\" -> \"Galician\", * \"glk\" -> \"Gilaki\", * \"gmh\" -> \"Middle High German\", * \"gn\" -> \"Guarani\", * \"goh\" -> \"Old High German\", * \"gom\" -> \"Goan Konkani\", * \"gon\" -> \"Gondi\", * \"gor\" -> \"Gorontalo\", * \"got\" -> \"Gothic\", * \"grb\" -> \"Grebo\", * \"grc\" -> \"Ancient Greek\", * \"gsw\" -> \"Swiss German\", * \"gu\" -> \"Gujarati\", * \"guc\" -> \"Wayuu\", * \"gur\" -> \"Frafra\", * \"guz\" -> \"Gusii\", * \"gv\" -> \"Manx\", * \"gwi\" -> \"Gwichʼin\", * \"ha\" -> \"Hausa\", * \"hai\" -> \"Haida\", * \"hak\" -> \"Hakka Chinese\", * \"haw\" -> \"Hawaiian\", * \"he\" -> \"Hebrew\", * \"hi\" -> \"Hindi\", * \"hif\" -> \"Fiji Hindi\", * \"hil\" -> \"Hiligaynon\", * \"hit\" -> \"Hittite\", * \"hmn\" -> \"Hmong\", * \"ho\" -> \"Hiri Motu\", * \"hr\" -> \"Croatian\", * \"hsb\" -> \"Upper Sorbian\", * \"hsn\" -> \"Xiang Chinese\", * \"ht\" -> \"Haitian Creole\", * \"hu\" -> \"Hungarian\", * \"hup\" -> \"Hupa\", * \"hy\" -> \"Armenian\", * \"hz\" -> \"Herero\", * \"ia\" -> \"Interlingua\", * \"iba\" -> \"Iban\", * \"ibb\" -> \"Ibibio\", * \"id\" -> \"Indonesian\", * \"ie\" -> \"Interlingue\", * \"ig\" -> \"Igbo\", * \"ii\" -> \"Sichuan Yi\", * \"ik\" -> \"Inupiaq\", * \"ilo\" -> \"Iloko\", * \"inh\" -> \"Ingush\", * \"io\" -> \"Ido\", * \"is\" -> \"Icelandic\", * \"it\" -> \"Italian\", * \"iu\" -> \"Inuktitut\", * \"izh\" -> \"Ingrian\", * \"ja\" -> \"Japanese\", * \"jam\" -> \"Jamaican Creole English\", * \"jbo\" -> \"Lojban\", * \"jgo\" -> \"Ngomba\", * \"jmc\" -> \"Machame\", * \"jpr\" -> \"Judeo-Persian\", * \"jrb\" -> \"Judeo-Arabic\", * \"jut\" -> \"Jutish\", * \"jv\" -> \"Javanese\", * \"ka\" -> \"Georgian\", * \"kaa\" -> \"Kara-Kalpak\", * \"kab\" -> \"Kabyle\", * \"kac\" -> \"Kachin\", * \"kaj\" -> \"Jju\", * \"kam\" -> \"Kamba\", * \"kaw\" -> \"Kawi\", * \"kbd\" -> \"Kabardian\", * \"kbl\" -> \"Kanembu\", * \"kcg\" -> \"Tyap\", * \"kde\" -> \"Makonde\", * \"kea\" -> \"Kabuverdianu\", * \"ken\" -> \"Kenyang\", * \"kfo\" -> \"Koro\", * \"kg\" -> \"Kongo\", * \"kgp\" -> \"Kaingang\", * \"kha\" -> \"Khasi\", * \"kho\" -> \"Khotanese\", * \"khq\" -> \"Koyra Chiini\", * \"khw\" -> \"Khowar\", * \"ki\" -> \"Kikuyu\", * \"kiu\" -> \"Kirmanjki\", * \"kj\" -> \"Kuanyama\", * \"kk\" -> \"Kazakh\", * \"kkj\" -> \"Kako\", * \"kl\" -> \"Kalaallisut\", * \"kln\" -> \"Kalenjin\", * \"km\" -> \"Khmer\", * \"kmb\" -> \"Kimbundu\", * \"kn\" -> \"Kannada\", * \"ko\" -> \"Korean\", * \"koi\" -> \"Komi-Permyak\", * \"kok\" -> \"Konkani\", * \"kos\" -> \"Kosraean\", * \"kpe\" -> \"Kpelle\", * \"kr\" -> \"Kanuri\", * \"krc\" -> \"Karachay-Balkar\", * \"kri\" -> \"Krio\", * \"krj\" -> \"Kinaray-a\", * \"krl\" -> \"Karelian\", * \"kru\" -> \"Kurukh\", * \"ks\" -> \"Kashmiri\", * \"ksb\" -> \"Shambala\", * \"ksf\" -> \"Bafia\", * \"ksh\" -> \"Colognian\", * \"ku\" -> \"Kurdish\", * \"kum\" -> \"Kumyk\", * \"kut\" -> \"Kutenai\", * \"kv\" -> \"Komi\", * \"kw\" -> \"Cornish\", * \"ky\" -> \"Kyrgyz\", * \"la\" -> \"Latin\", * \"lad\" -> \"Ladino\", * \"lag\" -> \"Langi\", * \"lah\" -> \"Lahnda\", * \"lam\" -> \"Lamba\", * \"lb\" -> \"Luxembourgish\", * \"lez\" -> \"Lezghian\", * \"lfn\" -> \"Lingua Franca Nova\", * \"lg\" -> \"Ganda\", * \"li\" -> \"Limburgish\", * \"lij\" -> \"Ligurian\", * \"liv\" -> \"Livonian\", * \"lkt\" -> \"Lakota\", * \"lmo\" -> \"Lombard\", * \"ln\" -> \"Lingala\", * \"lo\" -> \"Lao\", * \"lol\" -> \"Mongo\", * \"lou\" -> \"Louisiana Creole\", * \"loz\" -> \"Lozi\", * \"lrc\" -> \"Northern Luri\", * \"lt\" -> \"Lithuanian\", * \"ltg\" -> \"Latgalian\", * \"lu\" -> \"Luba-Katanga\", * \"lua\" -> \"Luba-Lulua\", * \"lui\" -> \"Luiseno\", * \"lun\" -> \"Lunda\", * \"luo\" -> \"Luo\", * \"lus\" -> \"Mizo\", * \"luy\" -> \"Luyia\", * \"lv\" -> \"Latvian\", * \"lzh\" -> \"Literary Chinese\", * \"lzz\" -> \"Laz\", * \"mad\" -> \"Madurese\", * \"maf\" -> \"Mafa\", * \"mag\" -> \"Magahi\", * \"mai\" -> \"Maithili\", * \"mak\" -> \"Makasar\", * \"man\" -> \"Mandingo\", * \"mas\" -> \"Masai\", * \"mde\" -> \"Maba\", * \"mdf\" -> \"Moksha\", * \"mdr\" -> \"Mandar\", * \"men\" -> \"Mende\", * \"mer\" -> \"Meru\", * \"mfe\" -> \"Morisyen\", * \"mg\" -> \"Malagasy\", * \"mga\" -> \"Middle Irish\", * \"mgh\" -> \"Makhuwa-Meetto\", * \"mgo\" -> \"Metaʼ\", * \"mh\" -> \"Marshallese\", * \"mi\" -> \"Maori\", * \"mic\" -> \"Mi'kmaq\", * \"min\" -> \"Minangkabau\", * \"mk\" -> \"Macedonian\", * \"ml\" -> \"Malayalam\", * \"mn\" -> \"Mongolian\", * \"mnc\" -> \"Manchu\", * \"mni\" -> \"Manipuri\", * \"moh\" -> \"Mohawk\", * \"mos\" -> \"Mossi\", * \"mr\" -> \"Marathi\", * \"mrj\" -> \"Western Mari\", * \"ms\" -> \"Malay\", * \"mt\" -> \"Maltese\", * \"mua\" -> \"Mundang\", * \"mul\" -> \"Multiple languages\", * \"mus\" -> \"Creek\", * \"mwl\" -> \"Mirandese\", * \"mwr\" -> \"Marwari\", * \"mwv\" -> \"Mentawai\", * \"my\" -> \"Burmese\", * \"mye\" -> \"Myene\", * \"myv\" -> \"Erzya\", * \"mzn\" -> \"Mazanderani\", * \"na\" -> \"Nauru\", * \"nan\" -> \"Min Nan Chinese\", * \"nap\" -> \"Neapolitan\", * \"naq\" -> \"Nama\", * \"nb\" -> \"Norwegian Bokmål\", * \"nd\" -> \"North Ndebele\", * \"nds\" -> \"Low German\", * \"nds-NL\" -> \"Low Saxon\", * \"ne\" -> \"Nepali\", * \"new\" -> \"Newari\", * \"ng\" -> \"Ndonga\", * \"nia\" -> \"Nias\", * \"niu\" -> \"Niuean\", * \"njo\" -> \"Ao Naga\", * \"nl\" -> \"Dutch\", * \"nl-BE\" -> \"Dutch (Belgian)\", * \"nmg\" -> \"Kwasio\", * \"nn\" -> \"Norwegian Nynorsk\", * \"nnh\" -> \"Ngiemboon\", * \"no\" -> \"Norwegian\", * \"nog\" -> \"Nogai\", * \"non\" -> \"Old Norse\", * \"nov\" -> \"Novial\", * \"nqo\" -> \"N’Ko\", * \"nr\" -> \"South Ndebele\", * \"nso\" -> \"Northern Sotho\", * \"nus\" -> \"Nuer\", * \"nv\" -> \"Navajo\", * \"nwc\" -> \"Classical Newari\", * \"ny\" -> \"Nyanja\", * \"nym\" -> \"Nyamwezi\", * \"nyn\" -> \"Nyankole\", * \"nyo\" -> \"Nyoro\", * \"nzi\" -> \"Nzima\", * \"oc\" -> \"Occitan\", * \"oj\" -> \"Ojibwa\", * \"om\" -> \"Oromo\", * \"or\" -> \"Odia\", * \"os\" -> \"Ossetic\", * \"osa\" -> \"Osage\", * \"ota\" -> \"Ottoman Turkish\", * \"pa\" -> \"Punjabi\", * \"pag\" -> \"Pangasinan\", * \"pal\" -> \"Pahlavi\", * \"pam\" -> \"Pampanga\", * \"pap\" -> \"Papiamento\", * \"pau\" -> \"Palauan\", * \"pcd\" -> \"Picard\", * \"pcm\" -> \"Nigerian Pidgin\", * \"pdc\" -> \"Pennsylvania German\", * \"pdt\" -> \"Plautdietsch\", * \"peo\" -> \"Old Persian\", * \"pfl\" -> \"Palatine German\", * \"phn\" -> \"Phoenician\", * \"pi\" -> \"Pali\", * \"pl\" -> \"Polish\", * \"pms\" -> \"Piedmontese\", * \"pnt\" -> \"Pontic\", * \"pon\" -> \"Pohnpeian\", * \"prg\" -> \"Prussian\", * \"pro\" -> \"Old Provençal\", * \"ps\" -> \"Pashto\", * \"pt\" -> \"Portuguese\", * \"pt-BR\" -> \"Portuguese (Brazilian)\", * \"pt-PT\" -> \"Portuguese (European)\", * \"qu\" -> \"Quechua\", * \"quc\" -> \"Kʼicheʼ\", * \"qug\" -> \"Chimborazo Highland Quichua\", * \"raj\" -> \"Rajasthani\", * \"rap\" -> \"Rapanui\", * \"rar\" -> \"Rarotongan\", * \"rgn\" -> \"Romagnol\", * \"rif\" -> \"Riffian\", * \"rm\" -> \"Romansh\", * \"rn\" -> \"Rundi\", * \"ro\" -> \"Romanian\", * \"ro-MD\" -> \"Moldavian\", * \"rof\" -> \"Rombo\", * \"rom\" -> \"Romany\", * \"root\" -> \"Root\", * \"rtm\" -> \"Rotuman\", * \"ru\" -> \"Russian\", * \"rue\" -> \"Rusyn\", * \"rug\" -> \"Roviana\", * \"rup\" -> \"Aromanian\", * \"rw\" -> \"Kinyarwanda\", * \"rwk\" -> \"Rwa\", * \"sa\" -> \"Sanskrit\", * \"sad\" -> \"Sandawe\", * \"sah\" -> \"Sakha\", * \"sam\" -> \"Samaritan Aramaic\", * \"saq\" -> \"Samburu\", * \"sas\" -> \"Sasak\", * \"sat\" -> \"Santali\", * \"saz\" -> \"Saurashtra\", * \"sba\" -> \"Ngambay\", * \"sbp\" -> \"Sangu\", * \"sc\" -> \"Sardinian\", * \"scn\" -> \"Sicilian\", * \"sco\" -> \"Scots\", * \"sd\" -> \"Sindhi\", * \"sdc\" -> \"Sassarese Sardinian\", * \"sdh\" -> \"Southern Kurdish\", * \"se\" -> \"Northern Sami\", * \"see\" -> \"Seneca\", * \"seh\" -> \"Sena\", * \"sei\" -> \"Seri\", * \"sel\" -> \"Selkup\", * \"ses\" -> \"Koyraboro Senni\", * \"sg\" -> \"Sango\", * \"sga\" -> \"Old Irish\", * \"sgs\" -> \"Samogitian\", * \"sh\" -> \"Serbo-Croatian\", * \"shi\" -> \"Tachelhit\", * \"shn\" -> \"Shan\", * \"shu\" -> \"Chadian Arabic\", * \"si\" -> \"Sinhala\", * \"sid\" -> \"Sidamo\", * \"sk\" -> \"Slovak\", * \"sl\" -> \"Slovenian\", * \"sli\" -> \"Lower Silesian\", * \"sly\" -> \"Selayar\", * \"sm\" -> \"Samoan\", * \"sma\" -> \"Southern Sami\", * \"smj\" -> \"Lule Sami\", * \"smn\" -> \"Inari Sami\", * \"sms\" -> \"Skolt Sami\", * \"sn\" -> \"Shona\", * \"snk\" -> \"Soninke\", * \"so\" -> \"Somali\", * \"sog\" -> \"Sogdien\", * \"sq\" -> \"Albanian\", * \"sr\" -> \"Serbian\", * \"sr-ME\" -> \"Montenegrin\", * \"srn\" -> \"Sranan Tongo\", * \"srr\" -> \"Serer\", * \"ss\" -> \"Swati\", * \"ssy\" -> \"Saho\", * \"st\" -> \"Southern Sotho\", * \"stq\" -> \"Saterland Frisian\", * \"su\" -> \"Sundanese\", * \"suk\" -> \"Sukuma\", * \"sus\" -> \"Susu\", * \"sux\" -> \"Sumerian\", * \"sv\" -> \"Swedish\", * \"sw\" -> \"Swahili\", * \"sw-CD\" -> \"Congo Swahili\", * \"swb\" -> \"Comorian\", * \"syc\" -> \"Classical Syriac\", * \"syr\" -> \"Syriac\", * \"szl\" -> \"Silesian\", * \"ta\" -> \"Tamil\", * \"tcy\" -> \"Tulu\", * \"te\" -> \"Telugu\", * \"tem\" -> \"Timne\", * \"teo\" -> \"Teso\", * \"ter\" -> \"Tereno\", * \"tet\" -> \"Tetum\", * \"tg\" -> \"Tajik\", * \"th\" -> \"Thai\", * \"ti\" -> \"Tigrinya\", * \"tig\" -> \"Tigre\", * \"tiv\" -> \"Tiv\", * \"tk\" -> \"Turkmen\", * \"tkl\" -> \"Tokelau\", * \"tkr\" -> \"Tsakhur\", * \"tl\" -> \"Tagalog\", * \"tlh\" -> \"Klingon\", * \"tli\" -> \"Tlingit\", * \"tly\" -> \"Talysh\", * \"tmh\" -> \"Tamashek\", * \"tn\" -> \"Tswana\", * \"to\" -> \"Tongan\", * \"tog\" -> \"Nyasa Tonga\", * \"tpi\" -> \"Tok Pisin\", * \"tr\" -> \"Turkish\", * \"tru\" -> \"Turoyo\", * \"trv\" -> \"Taroko\", * \"ts\" -> \"Tsonga\", * \"tsd\" -> \"Tsakonian\", * \"tsi\" -> \"Tsimshian\", * \"tt\" -> \"Tatar\", * \"ttt\" -> \"Muslim Tat\", * \"tum\" -> \"Tumbuka\", * \"tvl\" -> \"Tuvalu\", * \"tw\" -> \"Twi\", * \"twq\" -> \"Tasawaq\", * \"ty\" -> \"Tahitian\", * \"tyv\" -> \"Tuvinian\", * \"tzm\" -> \"Central Atlas Tamazight\", * \"udm\" -> \"Udmurt\", * \"ug\" -> \"Uyghur\", * \"uga\" -> \"Ugaritic\", * \"uk\" -> \"Ukrainian\", * \"umb\" -> \"Umbundu\", * \"und\" -> \"Unknown language\", * \"ur\" -> \"Urdu\", * \"uz\" -> \"Uzbek\", * \"vai\" -> \"Vai\", * \"ve\" -> \"Venda\", * \"vec\" -> \"Venetian\", * \"vep\" -> \"Veps\", * \"vi\" -> \"Vietnamese\", * \"vls\" -> \"West Flemish\", * \"vmf\" -> \"Main-Franconian\", * \"vo\" -> \"Volapük\", * \"vot\" -> \"Votic\", * \"vro\" -> \"Võro\", * \"vun\" -> \"Vunjo\", * \"wa\" -> \"Walloon\", * \"wae\" -> \"Walser\", * \"wal\" -> \"Wolaytta\", * \"war\" -> \"Waray\", * \"was\" -> \"Washo\", * \"wbp\" -> \"Warlpiri\", * \"wo\" -> \"Wolof\", * \"wuu\" -> \"Wu Chinese\", * \"xal\" -> \"Kalmyk\", * \"xh\" -> \"Xhosa\", * \"xmf\" -> \"Mingrelian\", * \"xog\" -> \"Soga\", * \"yao\" -> \"Yao\", * \"yap\" -> \"Yapese\", * \"yav\" -> \"Yangben\", * \"ybb\" -> \"Yemba\", * \"yi\" -> \"Yiddish\", * \"yo\" -> \"Yoruba\", * \"yrl\" -> \"Nheengatu\", * \"yue\" -> \"Cantonese\", * \"za\" -> \"Zhuang\", * \"zap\" -> \"Zapotec\", * \"zbl\" -> \"Blissymbols\", * \"zea\" -> \"Zeelandic\", * \"zen\" -> \"Zenaga\", * \"zgh\" -> \"Standard Moroccan Tamazight\", * \"zh\" -> \"Chinese\", * \"zh-HK\" -> \"Chinese (Hong Kong)\", * \"zh-CN\" -> \"Chinese (PRC)\", * \"zh-SG\" -> \"Chinese (Singapore)\", * \"zh-TW\" -> \"Chinese (Taiwan)\", * \"zh-Hans\" -> \"Simplified Chinese\", * \"zh-Hant\" -> \"Traditional Chinese\", * \"zu\" -> \"Zulu\", * \"zun\" -> \"Zuni\", * \"zxx\" -> \"No linguistic content\", * \"zza\" -> \"Zaza\"
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of id's used to tag models
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


