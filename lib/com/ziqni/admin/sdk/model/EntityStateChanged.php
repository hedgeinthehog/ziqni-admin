<?php
/**
 * EntityStateChanged
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EntityStateChanged Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EntityStateChanged implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EntityStateChanged';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entity_id' => 'string',
        'entity_type' => 'string',
        'changed_at' => '\DateTime',
        'changed_by' => 'string',
        'type_off_change' => 'int',
        'display_name' => 'string',
        'account_id' => 'string',
        'sequence_number' => 'int',
        'entity_ref_id' => 'string',
        'entity_parent_id' => 'string',
        'metadata' => 'object',
        'previous_state' => 'int',
        'current_state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entity_id' => null,
        'entity_type' => null,
        'changed_at' => 'date-time',
        'changed_by' => null,
        'type_off_change' => 'int32',
        'display_name' => null,
        'account_id' => null,
        'sequence_number' => 'int64',
        'entity_ref_id' => null,
        'entity_parent_id' => null,
        'metadata' => null,
        'previous_state' => 'int32',
        'current_state' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entity_id' => false,
		'entity_type' => false,
		'changed_at' => false,
		'changed_by' => false,
		'type_off_change' => false,
		'display_name' => false,
		'account_id' => false,
		'sequence_number' => false,
		'entity_ref_id' => false,
		'entity_parent_id' => false,
		'metadata' => false,
		'previous_state' => false,
		'current_state' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_id' => 'entityId',
        'entity_type' => 'entityType',
        'changed_at' => 'changedAt',
        'changed_by' => 'changedBy',
        'type_off_change' => 'typeOffChange',
        'display_name' => 'displayName',
        'account_id' => 'accountId',
        'sequence_number' => 'sequenceNumber',
        'entity_ref_id' => 'entityRefId',
        'entity_parent_id' => 'entityParentId',
        'metadata' => 'metadata',
        'previous_state' => 'previousState',
        'current_state' => 'currentState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_id' => 'setEntityId',
        'entity_type' => 'setEntityType',
        'changed_at' => 'setChangedAt',
        'changed_by' => 'setChangedBy',
        'type_off_change' => 'setTypeOffChange',
        'display_name' => 'setDisplayName',
        'account_id' => 'setAccountId',
        'sequence_number' => 'setSequenceNumber',
        'entity_ref_id' => 'setEntityRefId',
        'entity_parent_id' => 'setEntityParentId',
        'metadata' => 'setMetadata',
        'previous_state' => 'setPreviousState',
        'current_state' => 'setCurrentState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_id' => 'getEntityId',
        'entity_type' => 'getEntityType',
        'changed_at' => 'getChangedAt',
        'changed_by' => 'getChangedBy',
        'type_off_change' => 'getTypeOffChange',
        'display_name' => 'getDisplayName',
        'account_id' => 'getAccountId',
        'sequence_number' => 'getSequenceNumber',
        'entity_ref_id' => 'getEntityRefId',
        'entity_parent_id' => 'getEntityParentId',
        'metadata' => 'getMetadata',
        'previous_state' => 'getPreviousState',
        'current_state' => 'getCurrentState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('changed_at', $data ?? [], null);
        $this->setIfExists('changed_by', $data ?? [], null);
        $this->setIfExists('type_off_change', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('sequence_number', $data ?? [], null);
        $this->setIfExists('entity_ref_id', $data ?? [], null);
        $this->setIfExists('entity_parent_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('previous_state', $data ?? [], null);
        $this->setIfExists('current_state', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_id
     *
     * @return string|null
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string|null $entity_id 
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param string|null $entity_type 
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets changed_at
     *
     * @return \DateTime|null
     */
    public function getChangedAt()
    {
        return $this->container['changed_at'];
    }

    /**
     * Sets changed_at
     *
     * @param \DateTime|null $changed_at 
     *
     * @return self
     */
    public function setChangedAt($changed_at)
    {
        if (is_null($changed_at)) {
            throw new \InvalidArgumentException('non-nullable changed_at cannot be null');
        }
        $this->container['changed_at'] = $changed_at;

        return $this;
    }

    /**
     * Gets changed_by
     *
     * @return string|null
     */
    public function getChangedBy()
    {
        return $this->container['changed_by'];
    }

    /**
     * Sets changed_by
     *
     * @param string|null $changed_by 
     *
     * @return self
     */
    public function setChangedBy($changed_by)
    {
        if (is_null($changed_by)) {
            throw new \InvalidArgumentException('non-nullable changed_by cannot be null');
        }
        $this->container['changed_by'] = $changed_by;

        return $this;
    }

    /**
     * Gets type_off_change
     *
     * @return int|null
     */
    public function getTypeOffChange()
    {
        return $this->container['type_off_change'];
    }

    /**
     * Sets type_off_change
     *
     * @param int|null $type_off_change 
     *
     * @return self
     */
    public function setTypeOffChange($type_off_change)
    {
        if (is_null($type_off_change)) {
            throw new \InvalidArgumentException('non-nullable type_off_change cannot be null');
        }
        $this->container['type_off_change'] = $type_off_change;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name 
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id 
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets sequence_number
     *
     * @return int|null
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int|null $sequence_number 
     *
     * @return self
     */
    public function setSequenceNumber($sequence_number)
    {
        if (is_null($sequence_number)) {
            throw new \InvalidArgumentException('non-nullable sequence_number cannot be null');
        }
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets entity_ref_id
     *
     * @return string|null
     */
    public function getEntityRefId()
    {
        return $this->container['entity_ref_id'];
    }

    /**
     * Sets entity_ref_id
     *
     * @param string|null $entity_ref_id 
     *
     * @return self
     */
    public function setEntityRefId($entity_ref_id)
    {
        if (is_null($entity_ref_id)) {
            throw new \InvalidArgumentException('non-nullable entity_ref_id cannot be null');
        }
        $this->container['entity_ref_id'] = $entity_ref_id;

        return $this;
    }

    /**
     * Gets entity_parent_id
     *
     * @return string|null
     */
    public function getEntityParentId()
    {
        return $this->container['entity_parent_id'];
    }

    /**
     * Sets entity_parent_id
     *
     * @param string|null $entity_parent_id 
     *
     * @return self
     */
    public function setEntityParentId($entity_parent_id)
    {
        if (is_null($entity_parent_id)) {
            throw new \InvalidArgumentException('non-nullable entity_parent_id cannot be null');
        }
        $this->container['entity_parent_id'] = $entity_parent_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets previous_state
     *
     * @return int|null
     */
    public function getPreviousState()
    {
        return $this->container['previous_state'];
    }

    /**
     * Sets previous_state
     *
     * @param int|null $previous_state 
     *
     * @return self
     */
    public function setPreviousState($previous_state)
    {
        if (is_null($previous_state)) {
            throw new \InvalidArgumentException('non-nullable previous_state cannot be null');
        }
        $this->container['previous_state'] = $previous_state;

        return $this;
    }

    /**
     * Gets current_state
     *
     * @return int|null
     */
    public function getCurrentState()
    {
        return $this->container['current_state'];
    }

    /**
     * Sets current_state
     *
     * @param int|null $current_state 
     *
     * @return self
     */
    public function setCurrentState($current_state)
    {
        if (is_null($current_state)) {
            throw new \InvalidArgumentException('non-nullable current_state cannot be null');
        }
        $this->container['current_state'] = $current_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


