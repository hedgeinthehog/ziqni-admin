<?php
/**
 * CreateEntityRewardRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ZIQNI Admin API
 *
 * Ziqni Application Services are used to manage and configure spaces.
 *
 * The version of the OpenAPI document: 3.0.11
 * Contact: support@ziqni.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\com.ziqni.admin.sdk.model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateEntityRewardRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateEntityRewardRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateEntityRewardRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'custom_fields' => 'array<string,mixed>',
        'tags' => 'string[]',
        'metadata' => 'array<string,string>',
        'entity_type' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\RewardEntityType',
        'entity_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'reward_rank' => 'string',
        'reward_value' => 'float',
        'icon' => 'string',
        'issue_limit' => 'int',
        'delay' => 'int',
        'point_in_time' => '\DateTime',
        'period' => 'int',
        'translations' => '\OpenAPI\Client\com.ziqni.admin.sdk.model\Translation[]',
        'constraints' => 'string[]',
        'reward_type_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'custom_fields' => null,
        'tags' => null,
        'metadata' => null,
        'entity_type' => null,
        'entity_id' => null,
        'name' => null,
        'description' => null,
        'reward_rank' => null,
        'reward_value' => 'double',
        'icon' => null,
        'issue_limit' => 'int32',
        'delay' => 'int32',
        'point_in_time' => 'date-time',
        'period' => 'int32',
        'translations' => null,
        'constraints' => null,
        'reward_type_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'custom_fields' => false,
		'tags' => false,
		'metadata' => false,
		'entity_type' => false,
		'entity_id' => false,
		'name' => false,
		'description' => false,
		'reward_rank' => false,
		'reward_value' => false,
		'icon' => false,
		'issue_limit' => false,
		'delay' => false,
		'point_in_time' => false,
		'period' => false,
		'translations' => false,
		'constraints' => false,
		'reward_type_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_fields' => 'customFields',
        'tags' => 'tags',
        'metadata' => 'metadata',
        'entity_type' => 'entityType',
        'entity_id' => 'entityId',
        'name' => 'name',
        'description' => 'description',
        'reward_rank' => 'rewardRank',
        'reward_value' => 'rewardValue',
        'icon' => 'icon',
        'issue_limit' => 'issueLimit',
        'delay' => 'delay',
        'point_in_time' => 'pointInTime',
        'period' => 'period',
        'translations' => 'translations',
        'constraints' => 'constraints',
        'reward_type_id' => 'rewardTypeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_fields' => 'setCustomFields',
        'tags' => 'setTags',
        'metadata' => 'setMetadata',
        'entity_type' => 'setEntityType',
        'entity_id' => 'setEntityId',
        'name' => 'setName',
        'description' => 'setDescription',
        'reward_rank' => 'setRewardRank',
        'reward_value' => 'setRewardValue',
        'icon' => 'setIcon',
        'issue_limit' => 'setIssueLimit',
        'delay' => 'setDelay',
        'point_in_time' => 'setPointInTime',
        'period' => 'setPeriod',
        'translations' => 'setTranslations',
        'constraints' => 'setConstraints',
        'reward_type_id' => 'setRewardTypeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_fields' => 'getCustomFields',
        'tags' => 'getTags',
        'metadata' => 'getMetadata',
        'entity_type' => 'getEntityType',
        'entity_id' => 'getEntityId',
        'name' => 'getName',
        'description' => 'getDescription',
        'reward_rank' => 'getRewardRank',
        'reward_value' => 'getRewardValue',
        'icon' => 'getIcon',
        'issue_limit' => 'getIssueLimit',
        'delay' => 'getDelay',
        'point_in_time' => 'getPointInTime',
        'period' => 'getPeriod',
        'translations' => 'getTranslations',
        'constraints' => 'getConstraints',
        'reward_type_id' => 'getRewardTypeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('entity_type', $data ?? [], null);
        $this->setIfExists('entity_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('reward_rank', $data ?? [], null);
        $this->setIfExists('reward_value', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('issue_limit', $data ?? [], null);
        $this->setIfExists('delay', $data ?? [], null);
        $this->setIfExists('point_in_time', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('constraints', $data ?? [], null);
        $this->setIfExists('reward_type_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entity_type'] === null) {
            $invalidProperties[] = "'entity_type' can't be null";
        }
        if ($this->container['entity_id'] === null) {
            $invalidProperties[] = "'entity_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['reward_rank'] === null) {
            $invalidProperties[] = "'reward_rank' can't be null";
        }
        if ($this->container['reward_value'] === null) {
            $invalidProperties[] = "'reward_value' can't be null";
        }
        if ($this->container['constraints'] === null) {
            $invalidProperties[] = "'constraints' can't be null";
        }
        if ($this->container['reward_type_id'] === null) {
            $invalidProperties[] = "'reward_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_fields
     *
     * @return array<string,mixed>|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param array<string,mixed>|null $custom_fields A list of custom field entries
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string[]|null $tags A list of id's used to tag models
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return array<string,string>|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param array<string,string>|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets entity_type
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\RewardEntityType
     */
    public function getEntityType()
    {
        return $this->container['entity_type'];
    }

    /**
     * Sets entity_type
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\RewardEntityType $entity_type entity_type
     *
     * @return self
     */
    public function setEntityType($entity_type)
    {
        if (is_null($entity_type)) {
            throw new \InvalidArgumentException('non-nullable entity_type cannot be null');
        }
        $this->container['entity_type'] = $entity_type;

        return $this;
    }

    /**
     * Gets entity_id
     *
     * @return string
     */
    public function getEntityId()
    {
        return $this->container['entity_id'];
    }

    /**
     * Sets entity_id
     *
     * @param string $entity_id A unique identifier of an achievement or contest. Dependant on entityType
     *
     * @return self
     */
    public function setEntityId($entity_id)
    {
        if (is_null($entity_id)) {
            throw new \InvalidArgumentException('non-nullable entity_id cannot be null');
        }
        $this->container['entity_id'] = $entity_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of a reward
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The description of a Reward
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reward_rank
     *
     * @return string
     */
    public function getRewardRank()
    {
        return $this->container['reward_rank'];
    }

    /**
     * Sets reward_rank
     *
     * @param string $reward_rank If used in the context of contest this will associate with the rank of the leaderboard
     *
     * @return self
     */
    public function setRewardRank($reward_rank)
    {
        if (is_null($reward_rank)) {
            throw new \InvalidArgumentException('non-nullable reward_rank cannot be null');
        }
        $this->container['reward_rank'] = $reward_rank;

        return $this;
    }

    /**
     * Gets reward_value
     *
     * @return float
     */
    public function getRewardValue()
    {
        return $this->container['reward_value'];
    }

    /**
     * Sets reward_value
     *
     * @param float $reward_value Numerical value of the reward that will be issued based on the reward type
     *
     * @return self
     */
    public function setRewardValue($reward_value)
    {
        if (is_null($reward_value)) {
            throw new \InvalidArgumentException('non-nullable reward_value cannot be null');
        }
        $this->container['reward_value'] = $reward_value;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon An Icon id that has been pre uploaded to the system to display for reward
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets issue_limit
     *
     * @return int|null
     */
    public function getIssueLimit()
    {
        return $this->container['issue_limit'];
    }

    /**
     * Sets issue_limit
     *
     * @param int|null $issue_limit how many of thsese rewards are
     *
     * @return self
     */
    public function setIssueLimit($issue_limit)
    {
        if (is_null($issue_limit)) {
            throw new \InvalidArgumentException('non-nullable issue_limit cannot be null');
        }
        $this->container['issue_limit'] = $issue_limit;

        return $this;
    }

    /**
     * Gets delay
     *
     * @return int|null
     */
    public function getDelay()
    {
        return $this->container['delay'];
    }

    /**
     * Sets delay
     *
     * @param int|null $delay Delay of issuing a reward in minutes
     *
     * @return self
     */
    public function setDelay($delay)
    {
        if (is_null($delay)) {
            throw new \InvalidArgumentException('non-nullable delay cannot be null');
        }
        $this->container['delay'] = $delay;

        return $this;
    }

    /**
     * Gets point_in_time
     *
     * @return \DateTime|null
     */
    public function getPointInTime()
    {
        return $this->container['point_in_time'];
    }

    /**
     * Sets point_in_time
     *
     * @param \DateTime|null $point_in_time ISO8601 timestamp for when a Reward is available until a specific point in time. All records are stored in UTC time zone
     *
     * @return self
     */
    public function setPointInTime($point_in_time)
    {
        if (is_null($point_in_time)) {
            throw new \InvalidArgumentException('non-nullable point_in_time cannot be null');
        }
        $this->container['point_in_time'] = $point_in_time;

        return $this;
    }

    /**
     * Gets period
     *
     * @return int|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int|null $period Reward available for a period of time from issuing in minutes
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \OpenAPI\Client\com.ziqni.admin.sdk.model\Translation[]|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \OpenAPI\Client\com.ziqni.admin.sdk.model\Translation[]|null $translations translations
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        if (is_null($translations)) {
            throw new \InvalidArgumentException('non-nullable translations cannot be null');
        }
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets constraints
     *
     * @return string[]
     */
    public function getConstraints()
    {
        return $this->container['constraints'];
    }

    /**
     * Sets constraints
     *
     * @param string[] $constraints Additional constraints
     *
     * @return self
     */
    public function setConstraints($constraints)
    {
        if (is_null($constraints)) {
            throw new \InvalidArgumentException('non-nullable constraints cannot be null');
        }
        $this->container['constraints'] = $constraints;

        return $this;
    }

    /**
     * Gets reward_type_id
     *
     * @return string
     */
    public function getRewardTypeId()
    {
        return $this->container['reward_type_id'];
    }

    /**
     * Sets reward_type_id
     *
     * @param string $reward_type_id A unique id of the Reward Type
     *
     * @return self
     */
    public function setRewardTypeId($reward_type_id)
    {
        if (is_null($reward_type_id)) {
            throw new \InvalidArgumentException('non-nullable reward_type_id cannot be null');
        }
        $this->container['reward_type_id'] = $reward_type_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


